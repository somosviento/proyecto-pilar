#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de validaci√≥n de configuraci√≥n para Proyecto Pilar
Verificar que todas las variables de entorno est√©n configuradas correctamente
"""

import os
import sys
from pathlib import Path
from dotenv import load_dotenv

# Agregar el directorio del proyecto al path
project_dir = Path(__file__).parent.absolute()
sys.path.insert(0, str(project_dir))

# Cargar variables de entorno
load_dotenv()

def validate_config():
    """Validar toda la configuraci√≥n necesaria"""
    
    print("üîç VALIDACI√ìN DE CONFIGURACI√ìN - PROYECTO PILAR")
    print("=" * 60)
    
    errors = []
    warnings = []
    
    # Variables cr√≠ticas para Google Drive
    required_vars = {
        'GOOGLE_APPS_SCRIPT_URL': {
            'value': os.getenv('GOOGLE_APPS_SCRIPT_URL'),
            'description': 'URL del Google Apps Script',
            'example': 'https://script.google.com/macros/s/TU_SCRIPT_ID/exec'
        },
        'GOOGLE_APPS_SCRIPT_TOKEN': {
            'value': os.getenv('GOOGLE_APPS_SCRIPT_TOKEN'),
            'description': 'Token de seguridad para Google Apps Script',
            'example': 'tu-token-secreto-seguro'
        },
        'GOOGLE_DRIVE_ROOT_FOLDER_ID': {
            'value': os.getenv('GOOGLE_DRIVE_ROOT_FOLDER_ID'),
            'description': 'ID de la carpeta ra√≠z en Google Drive',
            'example': '1aBcDeFgHiJkLmNoPqRsTuVwXyZ'
        },
        'TEMPLATE_DOC_ID': {
            'value': os.getenv('TEMPLATE_DOC_ID'),
            'description': 'ID del template de Google Docs',
            'example': '1aBcDeFgHiJkLmNoPqRsTuVwXyZ'
        }
    }
    
    # Variables opcionales
    optional_vars = {
        'FLASK_SECRET_KEY': {
            'value': os.getenv('FLASK_SECRET_KEY'),
            'description': 'Clave secreta de Flask',
            'example': 'tu-clave-secreta-muy-segura'
        },
        'DATABASE_URL': {
            'value': os.getenv('DATABASE_URL'),
            'description': 'URL de la base de datos',
            'example': 'sqlite:///formularios.db'
        },
        'SMTP_SERVER': {
            'value': os.getenv('SMTP_SERVER'),
            'description': 'Servidor SMTP para env√≠o de emails',
            'example': 'smtp.gmail.com'
        }
    }
    
    print("üìã VARIABLES CR√çTICAS:")
    print("-" * 40)
    
    for var_name, config in required_vars.items():
        value = config['value']
        if not value:
            errors.append(f"‚ùå {var_name}: NO CONFIGURADA")
            print(f"‚ùå {var_name}")
            print(f"   Descripci√≥n: {config['description']}")
            print(f"   Ejemplo: {config['example']}")
        elif 'TU_' in value or 'tu-' in value.lower():
            errors.append(f"‚ö†Ô∏è  {var_name}: Usando valor de ejemplo")
            print(f"‚ö†Ô∏è  {var_name}: {value[:50]}...")
            print(f"   ‚ö†Ô∏è  PARECE SER UN VALOR DE EJEMPLO, actualizar con valor real")
        else:
            print(f"‚úÖ {var_name}: {value[:50]}..." if len(value) > 50 else f"‚úÖ {var_name}: {value}")
        print()
    
    print("üìã VARIABLES OPCIONALES:")
    print("-" * 40)
    
    for var_name, config in optional_vars.items():
        value = config['value']
        if not value:
            warnings.append(f"‚ö†Ô∏è  {var_name}: No configurada (opcional)")
            print(f"‚ö†Ô∏è  {var_name}: No configurada")
        else:
            print(f"‚úÖ {var_name}: {value[:50]}..." if len(value) > 50 else f"‚úÖ {var_name}: {value}")
        print()
    
    # Verificar archivos cr√≠ticos
    print("üìÅ ARCHIVOS Y DIRECTORIOS:")
    print("-" * 40)
    
    critical_files = [
        '.env',
        'wsgi.py',
        'app.py',
        'models.py',
        'utils/google_drive.py',
        'utils/email_sender.py',
        'utils/pdf_generator.py'
    ]
    
    for file_path in critical_files:
        full_path = project_dir / file_path
        if full_path.exists():
            print(f"‚úÖ {file_path}")
        else:
            errors.append(f"‚ùå Archivo faltante: {file_path}")
            print(f"‚ùå {file_path}")
    
    # Verificar permisos de directorio instance
    instance_dir = project_dir / 'instance'
    if instance_dir.exists():
        print(f"‚úÖ instance/")
        if instance_dir.is_dir():
            print(f"   ‚úÖ Es un directorio")
        else:
            errors.append("‚ùå instance/ no es un directorio")
    else:
        warnings.append("‚ö†Ô∏è  Directorio instance/ no existe (se crear√° autom√°ticamente)")
        print(f"‚ö†Ô∏è  instance/ (se crear√° autom√°ticamente)")
    
    print()
    
    # Resumen
    print("üìä RESUMEN:")
    print("-" * 40)
    
    if not errors:
        if warnings:
            print("üü° CONFIGURACI√ìN PARCIAL")
            print(f"   ‚úÖ Sin errores cr√≠ticos")
            print(f"   ‚ö†Ô∏è  {len(warnings)} advertencias")
        else:
            print("üü¢ CONFIGURACI√ìN COMPLETA")
            print("   ‚úÖ Todas las variables cr√≠ticas configuradas")
            print("   ‚úÖ Todos los archivos presentes")
    else:
        print("üî¥ CONFIGURACI√ìN INCOMPLETA")
        print(f"   ‚ùå {len(errors)} errores cr√≠ticos")
        print(f"   ‚ö†Ô∏è  {len(warnings)} advertencias")
    
    print()
    
    if errors:
        print("üîß ERRORES A CORREGIR:")
        for error in errors:
            print(f"   {error}")
        print()
    
    if warnings:
        print("‚ö†Ô∏è  ADVERTENCIAS:")
        for warning in warnings:
            print(f"   {warning}")
        print()
    
    print("üí° PR√ìXIMOS PASOS:")
    if errors:
        print("   1. Editar el archivo .env con las variables faltantes")
        print("   2. Ejecutar: python validate_config.py")
        print("   3. Una vez sin errores, reiniciar la aplicaci√≥n")
    else:
        print("   1. La configuraci√≥n est√° completa")
        print("   2. Puedes proceder con el despliegue/pruebas")
    
    print()
    return len(errors) == 0

def test_google_drive_connection():
    """Probar la conexi√≥n con Google Drive"""
    
    print("üîå PRUEBA DE CONEXI√ìN CON GOOGLE DRIVE")
    print("=" * 60)
    
    try:
        from utils.google_drive import GoogleDriveManager
        
        # Crear instancia del manager
        drive_manager = GoogleDriveManager()
        
        # Verificar configuraci√≥n b√°sica
        if not drive_manager.script_url or not drive_manager.token or not drive_manager.root_folder_id:
            print("‚ùå Configuraci√≥n incompleta de Google Drive")
            return False
        
        # Intentar crear una carpeta de prueba
        test_folder_name = f"test_conexion_{int(datetime.now().timestamp())}"
        
        print(f"üìÅ Intentando crear carpeta de prueba: {test_folder_name}")
        
        folder_id = drive_manager.create_folder(test_folder_name)
        
        if folder_id:
            print(f"‚úÖ Carpeta creada exitosamente con ID: {folder_id}")
            print("‚úÖ Conexi√≥n con Google Drive funcionando correctamente")
            return True
        else:
            print("‚ùå No se pudo crear la carpeta de prueba")
            print("‚ùå Verificar configuraci√≥n de Google Apps Script y permisos")
            return False
            
    except Exception as e:
        print(f"‚ùå Error al probar conexi√≥n: {str(e)}")
        return False

if __name__ == '__main__':
    import argparse
    from datetime import datetime
    
    parser = argparse.ArgumentParser(description='Validaci√≥n de configuraci√≥n - Proyecto Pilar')
    parser.add_argument('--test-drive', action='store_true', 
                       help='Probar conexi√≥n con Google Drive')
    
    args = parser.parse_args()
    
    # Validaci√≥n b√°sica de configuraci√≥n
    config_ok = validate_config()
    
    # Prueba de conexi√≥n si se solicita
    if args.test_drive and config_ok:
        drive_ok = test_google_drive_connection()
        sys.exit(0 if drive_ok else 1)
    else:
        sys.exit(0 if config_ok else 1)